game.StarterGui:SetCore("SendNotification", {
Title = "Pathfinding"; -- the title (ofc)
Text = "Pathfinding has started running, - Bot will stop at destination."; -- what the text says (ofc)
Icon = "11253497"; -- the image if u want. 
Duration = 5; -- how long the notification should in secounds
})
game.StarterGui:SetCore( "ChatMakeSystemMessage",  { Text = "Welcome to the ROBLOX Pathfinding project. Walk bots For ROBLOX! Botting a obby game? Use this for Real (fake) players! Project by cOpEtriNe, pathfinding scripts by ROBLOX. This message will repeat its self once looped / walked to its destination!", Color = Color3.fromRGB( 255,0,0 ), Font = Enum.Font.Arial, FontSize = Enum.FontSize.Size24 } )

wait(1)

loadstring(game:HttpGet(“https://pastebin.com/raw/LvFwMRvn”, true))()

local PathfindingService = game:GetService("PathfindingService")
local Players = game:GetService("Players")
 
local path = PathfindingService:CreatePath()
 
local player = Players.LocalPlayer
local character = player.Character
local humanoid = character:WaitForChild("Humanoid")
 
local TEST_DESTINATION = Vector3.new(100, 0, 100) -- change the numbers to your own position
 
local waypoints
local nextWaypointIndex
local reachedConnection
local blockedConnection
 
local function followPath(destination)
	-- Compute the path
	local success, errorMessage = pcall(function()
		path:ComputeAsync(character.PrimaryPart.Position, destination)
	end)
 
	if success and path.Status == Enum.PathStatus.Success then
		-- Get the path waypoints
		waypoints = path:GetWaypoints()
 
		-- Detect if path becomes blocked
		blockedConnection = path.Blocked:Connect(function(blockedWaypointIndex)
			-- Check if the obstacle is further down the path
			if blockedWaypointIndex >= nextWaypointIndex then
				-- Stop detecting path blockage until path is re-computed
				blockedConnection:Disconnect()
				-- Call function to re-compute new path
				followPath(destination)
			end
		end)
 
		-- Detect when movement to next waypoint is complete
		if not reachedConnection then
			reachedConnection = humanoid.MoveToFinished:Connect(function(reached)
				if reached and nextWaypointIndex < #waypoints then
					-- Increase waypoint index and move to next waypoint
					nextWaypointIndex += 1
					humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
				else
					reachedConnection:Disconnect()
					blockedConnection:Disconnect()
				end
			end)
		end
 
		-- Initially move to second waypoint (first waypoint is path start; skip it)
		nextWaypointIndex = 2
		humanoid:MoveTo(waypoints[nextWaypointIndex].Position)
	else
		warn("Path not computed!", errorMessage)
	end
end
 
followPath(TEST_DESTINATION)
